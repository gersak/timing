;; This file is autogenerated using vura.holidays.compile/-main

(ns vura.holidays.lv
  (:require 
  [clojure.string]
  [vura.holidays :refer [is-holiday?]]
  [vura.holidays.name :as n]
  [vura.holidays.compiler :as compiler]))


(def holidays
  {"05-04 and if saturday,sunday then next monday"
 {"substitute" true,
  :name
  {:en "Restoration of Independence day",
   :lv "Latvijas Republikas Neatkarības atjaunošanas diena"}},
 "01-01" {:name (partial n/get-name "01-01")},
 "11-18 and if saturday,sunday then next monday"
 {"substitute" true,
  :name
  {:en "Republic Day", :lv "Latvijas Republikas proklamēšanas diena"}},
 "easter" {:name (partial n/get-name "easter")},
 "06-24" {:name {:en "Midsummer", :lv "Jāņi"}},
 "12-24" {:name (partial n/get-name "12-24")},
 "06-23" {:name {:en "Midsummer Eve", :lv "Līgo Diena"}},
 "easter -2" {:name (partial n/get-name "easter -2")},
 "2nd sunday in May"
 {"type" "observance", :name (partial n/get-name "Mothers Day")},
 "12-26" {:name (partial n/get-name "12-26")},
 "easter 1" {:name (partial n/get-name "easter 1")},
 "05-01" {:name (partial n/get-name "05-01")},
 "12-31" {:name (partial n/get-name "12-31")},
 "12-25" {:name (partial n/get-name "12-25")}}
)


(def locale-holiday-mapping
  (reduce-kv
    (fn [result definition name-mapping]
      (assoc result
             (compiler/compile-type (compiler/parse-definition definition))
             name-mapping))
    nil
    holidays))


(defn holiday?
  [context]
  (some
   (fn [[pred naming]]
     (when (pred context)
       naming))
   locale-holiday-mapping))


(defmethod is-holiday? :lv
  [_ context]
  (holiday? context))