;; This file is autogenerated using vura.holidays.compile/-main

(ns vura.holidays.cd
  (:require 
  [clojure.string]
  [vura.holidays :refer [is-holiday?]]
  [vura.holidays.name :as n]
  [vura.holidays.compiler :as compiler]))


(def holidays
  {"06-30 and if sunday then next monday"
 {"substitute" true,
  "_name" "Independence Day",
  :name {:fr "Anniversaire de Indépendance"}},
 "08-01 and if sunday then next monday"
 {"substitute" true,
  :name {:fr "Fête des parents", :en "Parents' Day"}},
 "05-17 and if sunday then next monday"
 {"substitute" true,
  :name
  {:fr "Journée de la Révolution et des Forces Armées",
   :en "Liberation Day"}},
 "01-04 and if sunday then next monday"
 {"substitute" true,
  :name {:fr "Martyrs de l'Indépendance", :en "Day of the Martyrs"}},
 "01-01 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "01-01")},
 "12-25 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "12-25")},
 "01-16 and if sunday then next tuesday"
 {"substitute" true,
  :name
  {:fr "Journée du Héro National Laurent Désiré Kabila",
   :en "Anniversary of President Laurent Kabila"}},
 "01-17 and if sunday then next monday"
 {"substitute" true,
  :name
  {:fr "Journée du Héro National Patrice Emery Lumumba",
   :en "Anniversary of Prime Minister Patrice Emery Lumumba"}},
 "2016-01-15" {:name (partial n/get-name "Public Holiday")},
 "05-01 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "05-01")}}
)


(def locale-holiday-mapping
  (reduce-kv
    (fn [result definition name-mapping]
      (assoc result
             (compiler/compile-type (compiler/parse-definition definition))
             name-mapping))
    nil
    holidays))


(defn holiday?
  [context]
  (some
   (fn [[pred naming]]
     (when (pred context)
       naming))
   locale-holiday-mapping))


(defmethod is-holiday? :cd
  [_ context]
  (holiday? context))