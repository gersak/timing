;; This file is autogenerated using vura.holidays.compile/-main

(ns vura.holidays.bo
  (:require 
  [clojure.string]
  [vura.holidays :refer [is-holiday?]]
  [vura.holidays.name :as n]
  [vura.holidays.compiler :as compiler]))


(def holidays
  {"08-06" {"_name" "Independence Day", :name {:es "Día de la Patria"}},
 "easter -48" {:name {:en "Carnival", :es "Carnaval"}},
 "01-01" {:name (partial n/get-name "01-01")},
 "08-02"
 {:name
  {:en "Agrarian Reform Day",
   :es "Día de la Revolución Agraria, Productiva y Comunitaria"}},
 "easter 39" {:name (partial n/get-name "easter 39")},
 "easter -47" {:name (partial n/get-name "easter -47")},
 "easter" {"type" "observance", :name (partial n/get-name "easter")},
 "06-21"
 {:name
  {:en "Andean New Year", :ay "Willkakuti", :es "Año Nuevo Andino"}},
 "easter -2" {:name (partial n/get-name "easter -2")},
 "11-02" {:name (partial n/get-name "11-02")},
 "02-02"
 {:name
  {:en "Feast of the Virgin of Candelaria",
   :qu "Mamacha Candelaria",
   :es "Fiesta de la Virgen de Candelaria"}},
 "12-25" {:name (partial n/get-name "12-25")}}
)


(def locale-holiday-mapping
  (reduce-kv
    (fn [result definition name-mapping]
      (assoc result
             (compiler/compile-type (compiler/parse-definition definition))
             name-mapping))
    nil
    holidays))


(defn holiday?
  [context]
  (some
   (fn [[pred naming]]
     (when (pred context)
       naming))
   locale-holiday-mapping))


(defmethod is-holiday? :bo
  [_ context]
  (holiday? context))