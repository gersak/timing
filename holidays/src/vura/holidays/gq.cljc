;; This file is autogenerated using vura.holidays.compile/-main

(ns vura.holidays.gq
  (:require 
  [clojure.string]
  [vura.holidays :refer [is-holiday?]]
  [vura.holidays.name :as n]
  [vura.holidays.compiler :as compiler]))


(def holidays
  {"easter 60" {:name (partial n/get-name "easter 60")},
 "06-05 and if sunday then next monday"
 {"substitute" true,
  :name {:es "Natalicio de Teodoro Obiang", :en "President's Day"}},
 "12-08 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "12-08")},
 "08-15 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "Constitution Day")},
 "01-01 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "01-01")},
 "12-25 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "12-25")},
 "easter -2" {:name (partial n/get-name "easter -2")},
 "10-12 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "Independence Day")},
 "08-03 and if sunday then next monday"
 {"substitute" true,
  :name {:es "DÃ­a del Golpe de Libertad", :en "Armed Forces Day"}},
 "05-01 and if sunday then next monday"
 {"substitute" true, :name (partial n/get-name "05-01")}}
)


(def locale-holiday-mapping
  (reduce-kv
    (fn [result definition name-mapping]
      (assoc result
             (compiler/compile-type (compiler/parse-definition definition))
             name-mapping))
    nil
    holidays))


(defn holiday?
  [context]
  (some
   (fn [[pred naming]]
     (when (pred context)
       naming))
   locale-holiday-mapping))


(defmethod is-holiday? :gq
  [_ context]
  (holiday? context))